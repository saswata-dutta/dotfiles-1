" No need for vi compatibility
set nocompatible

" Encoding
set encoding=utf-8

" Line numbering
set number
set numberwidth=4
set ruler

" This issues with toggling nerdtree
set guioptions-=LR

" We want colors!
syntax on

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set expandtab
set list listchars=tab:»\ ,trail:·,nbsp:·

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc

" Status bar
set laststatus=2

" Say no to welcome screen
set shortmess+=I

" History & backups
set nobackup
set nowritebackup
set noswapfile
set history=1000

" Highlight characters in column >80
set colorcolumn=80

" Thorfile, Rakefile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Gemfile.local,Rakefile,Thorfile,Guardfile,config.ru,*.prawn,*.eye} set ft=ruby
au BufRead,BufNewFile {*.json.*} set ft=javascript

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Use modeline overrides
set modeline
set modelines=10

" Make me curse less
:command! WQ wq
:command! Wq wq
:command! W w
:command! Q q
:command! Qa qa

" ~~~~~~~~~~~~ key bindings ~~~~~~~~~~~~~~

" Leader key
let mapleader=","

" Fast saving
nnoremap <Leader>w :w<CR>

" Easy window switching
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Hide search highlighting
nnoremap <silent> <Space> <CR> :noh<CR><CR>

" Move line(s) of text using Alt+j/k
nnoremap <silent> <A-j> :m+<CR>==
nnoremap <silent> <A-k> :m-2<CR>==
inoremap <silent> <A-j> <Esc>:m+<CR>==gi
inoremap <silent> <A-k> <Esc>:m-2<CR>==gi
vnoremap <silent> <A-j> :m'>+<CR>gv=gv
vnoremap <silent> <A-k> :m-2<CR>gv=gv

" allow moving with j/k in insert mode
inoremap <c-j> <Down>
inoremap <c-k> <Up>
inoremap <c-h> <Left>
inoremap <c-l> <Right>

" Indenting with Alt + [ and ]
nmap <A-[> <<
nmap <A-]> >>
nmap <A-h> <<
nmap <A-l> >>
vmap <A-[> <gv
vmap <A-]> >gv

" CTags
map <Leader>rt :!ctags --extra=+f -R *<CR><CR>

" Auto indent whole file
nnoremap <silent> <leader>=call("normal gg=G")<CR>

" ruby hashrocket conversion
nmap <leader>rh :%s/\v:(\w+) \=\>/\1:/g<cr>

" disable arrow keys
inoremap <Up>    <NOP>
inoremap <Down>  <NOP>
inoremap <Left>  <NOP>
inoremap <Right> <NOP>
noremap  <Up>    <NOP>
noremap  <Down>  <NOP>
noremap  <Left>  <NOP>
noremap  <Right> <NOP>

" smart file rename
" stolen from: https://github.com/garybernhardt/dotfiles/blob/master/.vimrc
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'))
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>m :call RenameFile()<cr>

" convert var assignment to rspec let
" stolen from: https://github.com/garybernhardt/dotfiles/blob/master/.vimrc
function! PromoteToLet()
  :normal! dd
  :exec '?^\s*it\>'
  :normal! P
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  :normal ==
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr>

" fold ruby comments automatically
autocmd FileType ruby,eruby
      \ set foldmethod=expr |
      \ set foldexpr=getline(v:lnum)=~'^\\s*#' |
      \ exe "normal zM``"

" remove trailing ws on write
autocmd BufWritePre * :%s/\s\+$//e

" ~~~~~~~~~~~~ plugins ~~~~~~~~~~~~~~

" Vundle needs this for ftdetect to work
filetype off

set rtp+=~/.vim/bundle/Vundle/
call vundle#rc()

Plugin 'VundleVim/Vundle.vim'

" color scheme
Plugin 'flazz/vim-colorschemes'
colorscheme Tomorrow-Night

" nerdtree
Plugin 'scrooloose/nerdtree'

function! ToggleFileExplorer()
 :NERDTreeToggle
 :redraw
endfunction
:command! ToggleFileExplorer :call ToggleFileExplorer()

nmap <silent> <leader>n :ToggleFileExplorer<CR>

let NERDTreeMapOpenSplit = "s"
let NERDTreeMapOpenVSplit = "v"
let NERDTreeMinimalUI = 1
let NERDTreeIgnore=['\.rbc$', '\~$']

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
let g:airline_theme="tomorrow"

Plugin 'scrooloose/syntastic'
let g:syntastic_check_on_open=1

Plugin 'MarcWeber/vim-addon-mw-utils'
" Plugin 'tomtom/tlib_vim'

Plugin 'kien/ctrlp.vim'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/vendor/*,*/coverage/*,*/profiling/*,*/measurements/*,*/doc/*,*/node_modules/*
nnoremap <leader>. :CtrlPTag<cr>

Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-repeat'

Plugin 'vim-scripts/BufOnly.vim'
Plugin 'vim-scripts/taglist.vim'

" required by snipmate
Plugin 'tomtom/tlib_vim'

Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'

Plugin 'vim-ruby/vim-ruby'
Plugin 'raichoo/haskell-vim'
Plugin 'elixir-lang/vim-elixir'
Plugin 'pangloss/vim-javascript'
Plugin 'kchmck/vim-coffee-script'

" clojure
Plugin 'guns/vim-clojure-static'
Plugin 'guns/vim-sexp'
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'tpope/vim-fireplace'
Plugin 'tpope/vim-sexp-mappings-for-regular-people'

Plugin 'tpope/vim-markdown'
Plugin 'slim-template/vim-slim'
Plugin 'groenewege/vim-less'
Plugin 'jgdavey/vim-blockle'
Plugin 'puppetlabs/puppet-syntax-vim'

Plugin 'michaeljsmith/vim-indent-object'
Plugin 'kana/vim-textobj-user'
Plugin 'nelstrom/vim-textobj-rubyblock'

Plugin 'tpope/vim-dispatch'
Plugin 'thoughtbot/vim-rspec'

map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

let g:rspec_command = "Dispatch bundle exec rspec {spec}"

" load the plugin and indent settings for the detected filetype
 call vundle#end()
 filetype plugin indent on

" ~~~~~~~~~~~~ include local config  ~~~~~~~~~~~~~~

if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
